<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://he5050.github.io</id>
    <title>庵主老衲来也</title>
    <updated>2019-07-10T07:34:23.530Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://he5050.github.io"/>
    <link rel="self" href="https://he5050.github.io/atom.xml"/>
    <subtitle>五年前端三年切图@怡红院
</subtitle>
    <logo>https://he5050.github.io/images/avatar.png</logo>
    <icon>https://he5050.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 庵主老衲来也</rights>
    <entry>
        <title type="html"><![CDATA[关于js的位运算]]></title>
        <id>https://he5050.github.io/post/ce-shi-7</id>
        <link href="https://he5050.github.io/post/ce-shi-7">
        </link>
        <updated>2019-07-03T02:56:14.000Z</updated>
        <summary type="html"><![CDATA[<p>程序中的所有数在计算机内存中都是以二进制的形式储存的。位运算说穿了，就是直接对整数在内存中的二进制位进行操作。</p>
]]></summary>
        <content type="html"><![CDATA[<p>程序中的所有数在计算机内存中都是以二进制的形式储存的。位运算说穿了，就是直接对整数在内存中的二进制位进行操作。</p>
<!-- more -->
<h1 id="前言">前言</h1>
<blockquote>
<p>从现代计算机中所有的数据二进制的形式存储在设备中。即0、1两种状态，计算机对二进制数据进行的运算(+、-、*、/)都是叫位运算，即将符号位共同参与运算的运算。</p>
</blockquote>
<h2 id="1-位运算有哪些">1. 位运算有哪些</h2>
<table>
<thead>
<tr>
<th>运算符</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>按位与（AND）</td>
<td><code>a &amp; b</code></td>
<td>对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。</td>
</tr>
<tr>
<td>按位或（OR）</td>
<td><code>a | b</code></td>
<td>对于每一个比特位，当两个操作数相应的比特位至少有一个1时，结果为1，否则为0。</td>
</tr>
<tr>
<td>按位异或（XOR）</td>
<td><code>a ^ b</code></td>
<td>对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。</td>
</tr>
<tr>
<td>按位非（NOT））</td>
<td><code>~ a</code></td>
<td>反转操作数的比特位，即0变成1，1变成0。</td>
</tr>
<tr>
<td>左移（Left shift））</td>
<td><code>a &lt;&lt; b</code></td>
<td>将 a 的二进制形式向左移 b (&lt; 32) 比特位，右边用0填充。</td>
</tr>
<tr>
<td>有符号右移</td>
<td><code>a &gt;&gt; b</code></td>
<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位。</td>
</tr>
<tr>
<td>无符号右移</td>
<td><code>a &gt;&gt;&gt; b</code></td>
<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td>
</tr>
</tbody>
</table>
<h2 id="2-按位与">2. 按位与 &amp;</h2>
<blockquote>
<p>&amp;是二元运算符，它以特定的方式的方式组合操作数中对应的位，如果对应的位都为1，那么结果就是1， 如果任意一个位是0 则结果就是0。</p>
<p>1 &amp; 3的结果为1</p>
<p>那我们来看看他是怎么运行的</p>
<p>1的二进制表示为 0 0 0 0 0 0 1</p>
<p>3的二进制表示为 0 0 0 0 0 1 1</p>
<p>根据 &amp; 的规则 得到的结果为 0 0 0 0 0 0 0 1,十进制表示就是1</p>
</blockquote>
<p>与运算的一个简单应用</p>
<pre><code>3&amp;1 // 1; =&gt; 奇数&amp;1 = 1
2&amp;1 // 0; =&gt; 偶数&amp;1 = 0
</code></pre>
<blockquote>
<p>可以等同于用于奇偶计算</p>
</blockquote>
<h2 id="3-按位或">3. 按位或 ｜</h2>
<blockquote>
<p>|运算符跟&amp;的区别在于如果对应的位中任一个操作数为1 那么结果就是1。</p>
<p>1的二进制表示为 0 0 0 0 0 0 1</p>
<p>3的二进制表示为 0 0 0 0 0 1 1</p>
<p>所以 1 | 3的结果为3</p>
</blockquote>
<pre><code class="language-javascript">// 一般方法：
var rIndex = Math.floor((Math.random() * len))

// 使用位运算的方法
var rIndex = Math.random() * len | 0
</code></pre>
<h2 id="4-按位异或">4. 按位异或 ^</h2>
<blockquote>
<p>^运算符跟|类似，但有一点不同的是 如果两个操作位都为1的话，结果产生0。</p>
<p>1的二进制表示为 0 0 0 0 0 0 1</p>
<p>3的二进制表示为 0 0 0 0 0 1 1</p>
<p>所以 1 ^ 3的结果为2</p>
</blockquote>
<p>简单一个应用是用于数值交换，也可以判断两个数是否相等</p>
<pre><code class="language-javascript">// 正规君
var a = 1;
var b = 2;
var temp;
temp = a;
a = b;
b = temp
</code></pre>
<pre><code class="language-javascript">// 杂牌君
var a = 1;
var b = 2;
a = a ^ b;
b = b ^ a;
a = a ^ b;

// 一般方法的简写：
togle = toggle ? 0 : 1;

// 使用位运算的方法：
toggle ^= 1;
</code></pre>
<h2 id="5-按位非~">5. 按位非~</h2>
<blockquote>
<p>~运算符是对位求反，1变0,0变1，也就是求二进制的反码</p>
<p>1的二进制表示为 0 0 0 0 0 0 1</p>
<p>所以 ~1 的结果是-2</p>
</blockquote>
<p>简单的理解<code>~</code>就是对原数进行取整然后取反，最后在做在减一操作，如<code>~9</code>可以简单的理解成为<code>(-9 - 1) = -10</code></p>
<pre><code class="language-javascript">~9 // -10
~-9 // 8
~9.8 // 10
~-9.8 // 8
if(~str.indexOf(&quot;a&quot;)) {
// 判断字符串是否存在某一个值
}

console.log('~null: ', ~null);       // =&gt; -1
console.log('~undefined: ', ~undefined);  // =&gt; -1
console.log('~0: ', ~0);          // =&gt; -1
console.log('~{}: ', ~{});         // =&gt; -1
console.log('~[]: ', ~[]);         // =&gt; -1
console.log('~(1/0): ', ~(1/0));      // =&gt; -1
console.log('~false: ', ~false);      // =&gt; -1
console.log('~true: ', ~true);       // =&gt; -2
console.log('~1.2543: ', ~1.2543);     // =&gt; -2
console.log('~4.9: ', ~4.9);       // =&gt; -5
console.log('~(-2.999): ', ~(-2.999));   // =&gt; 1
console.log('~~null: ', ~~null);       // =&gt; 0
console.log('~~undefined: ', ~~undefined);  // =&gt; 0
console.log('~~0: ', ~~0);          // =&gt; 0
console.log('~~{}: ', ~~{});         // =&gt; 0
console.log('~~[]: ', ~~[]);         // =&gt; 0
console.log('~~(1/0): ', ~~(1/0));      // =&gt; 0
console.log('~~false: ', ~~false);      // =&gt; 0
console.log('~~true: ', ~~true);       // =&gt; 1
console.log('~~1.2543: ', ~~1.2543);     // =&gt; 1
console.log('~~4.9: ', ~~4.9);       // =&gt; 4
console.log('~~(-2.999): ', ~~(-2.999));   // =&gt; -2
</code></pre>
<blockquote>
<p>当然话，我这是简单的理解，实现还是按二进制度的位来依次计算的,能过上面的例子，我们不难发现，我们可以用<code>~~9.3434</code>简单的对浮点点进行取整，但是这里没有四舍五入的。</p>
</blockquote>
<h2 id="6-左移">6. 左移 &lt;&lt;</h2>
<blockquote>
<p><code>&lt;&lt;</code>运算符使指定值的二进制所有位都左移规定的次数，对于其移动规则只需记住丢弃最高位，0补最低位即按二进制形式把所有的数字向左移动对应的位数，高位移出(舍弃)，低位的空位补零。</p>
<p>1的二进制表示为 0 0 0 0 0 0 1</p>
<p>所以 1&lt;&lt;1的结果为2</p>
</blockquote>
<p>可以理解对数取整然后做乘法，乘法的2的阶乘。</p>
<pre><code class="language-javascript">2 &lt;&lt; 1 // 4 等价于 2 * 2^1
2 &lt;&lt; 2 // 8 等价于 2 * 2^2
</code></pre>
<h2 id="7-右移">7. 右移 &gt;&gt;</h2>
<blockquote>
<p><code>&gt;&gt;</code>运算符使指定值的二进制所有位都右移规定的次数，对于其移动规则只需记住符号位不变，左边补上符号位即按二进制形式把所有的数字向右移动对应的位数，低位移出(舍弃)，高位的空位补符号位，即正数补零，负数补1。</p>
<p>1的二进制表示为 0 0 0 0 0 0 1</p>
<p>所以 1&gt;&gt;1的结果为0</p>
</blockquote>
<p>可以理解对数取整然后做除法，除数为2的阶乘。</p>
<pre><code class="language-javascript">8 &lt;&lt; 1 // 4 等价于 2 / 2^1
8 &lt;&lt; 2 // 2 等价于 2 / 2^2
8 &lt;&lt; 3 // 1 等价于 2 / 2^2
</code></pre>
<h2 id="8-无符号右移">8. 无符号右移&gt;&gt;&gt;</h2>
<blockquote>
<p><code>&gt;&gt;&gt;</code>运算符忽略了符号位扩展，0补最高位，但是只是对32位和64位的值有意义。
对于非负数，有符号右移和无符号右移总是返回相同的结果。</p>
<p>例如，<code>9 &gt;&gt;&gt; 2</code>得到 2 和 <code>9 &gt;&gt; 2</code>相同。</p>
</blockquote>
<p>简单应用取整：</p>
<pre><code class="language-js">// 十进制度转二进制
var res = 14.toString(2); // &quot;1110&quot;
console.log(~~ 6.83)    // 6
console.log(6.83 &gt;&gt; 0)  // 6
console.log(6.83 &lt;&lt; 0)  // 6
console.log(6.83 | 0)   // 6
// &gt;&gt;&gt;不可对负数取整
console.log(6.83 &gt;&gt;&gt; 0)   // 6
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用代码]]></title>
        <id>https://he5050.github.io/post/ce-shi-3</id>
        <link href="https://he5050.github.io/post/ce-shi-3">
        </link>
        <updated>2019-07-02T03:43:44.000Z</updated>
        <summary type="html"><![CDATA[<p>主要是针对平时，有使用，而且很有意思的代码进行收集整理</p>
]]></summary>
        <content type="html"><![CDATA[<p>主要是针对平时，有使用，而且很有意思的代码进行收集整理</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于使用puppeteer的screenshot截图乱码]]></title>
        <id>https://he5050.github.io/post/ce-shi-2</id>
        <link href="https://he5050.github.io/post/ce-shi-2">
        </link>
        <updated>2019-07-02T03:43:32.000Z</updated>
        <summary type="html"><![CDATA[<p>前一会得空写了一个微信小助手，发现在centos上面发微信发送图片为乱码</p>
]]></summary>
        <content type="html"><![CDATA[<p>前一会得空写了一个微信小助手，发现在centos上面发微信发送图片为乱码</p>
<!-- more -->
<h1 id="screenshot截图乱码">screenshot截图乱码</h1>
<p>如图所示：
<img src="http://ww1.sinaimg.cn/large/69abf49bly1g4ujzb8b9gj20bi0kg79e.jpg" alt=""></p>
<h2 id="问题">问题</h2>
<p>后面在网上查了一下原来是因为字体库的问题</p>
<h2 id="解决">解决</h2>
<h3 id="1-安装fontconfig">1. 安装fontconfig</h3>
<ul>
<li><code>yum -y install fontconfig</code></li>
<li>在执行完上述命令后，就可以在<code>/usr/share</code>文件里面的<code>fonts</code>和<code>fontconfig</code></li>
</ul>
<h3 id="2-添加中文字体库">2. 添加中文字体库</h3>
<ul>
<li>在CentOS的/usr/share/fonts新建一个叫chinese的文件夹<code>mkdir /usr/share/fonts/chinese</code></li>
<li>从<code>window</code>的<code>C:\Windows\Fonts</code>里面把你需要的字体拷贝出来。比如说我需要宋体，我就选择<code>simsun.ttc</code>上传到<code>/usr/share/fonts/chinese</code></li>
<li>修改chinese目录的权限。<code>chmod -R 775 /usr/share/fonts/chinese</code></li>
<li>接下来需要安装ttmkfdir来搜索目录中所有的字体信息，并汇总生成fonts.scale文件，输入命令<code>yum -y install ttmkfdir</code></li>
<li>执行ttmkfdir命令，<code>ttmkfdir -e /usr/share/X11/fonts/encodings/encodings.dir</code></li>
<li>修改字体配置文件，<code>vi /etc/fonts/fonts.conf</code></li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/69abf49bly1g4uk88063gj20gx06eglj.jpg" alt=""></p>
<ul>
<li>刷新内存中的字体缓存，<code>fc-cache</code></li>
<li>看一下现在机器上已经有了刚才添加的字体。<code>fc-list :lang=zh</code>,<code>fc-list</code></li>
</ul>
<h3 id="3-补充">3. 补充</h3>
<blockquote>
<p>在centos上面使用puppeteer时创建Page要注意使用无头配置</p>
</blockquote>
<pre><code class="language-js">const browser = await puppeteer.launch({
        ignoreHTTPSErrors: true,
        headless: true,
        defaultViewport: {
            // tips: 标准2倍图 750 1334
            // width: 375 ,
            // height: 812
            width: 414,
            height: 736
        },
        args: [&quot;--no-sandbox&quot;, &quot;--disable-setuid-sandbox&quot;]
    });
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用库与资源站点收藏]]></title>
        <id>https://he5050.github.io/post/ce-shi</id>
        <link href="https://he5050.github.io/post/ce-shi">
        </link>
        <updated>2019-07-02T03:43:18.000Z</updated>
        <summary type="html"><![CDATA[<p>平时收集的觉得好用的以及有意思的库与资源网</p>
]]></summary>
        <content type="html"><![CDATA[<p>平时收集的觉得好用的以及有意思的库与资源网</p>
<!-- more -->
<h2 id="vue库">vue库</h2>
<h3 id="1-vue-3d-model">1. <a href="https://github.com/hujiulong/vue-3d-model">vue-3d-model</a></h3>
<pre><code>	一个展示三维模型的Vue组件，支持模型操作和模型点击事件，能自动缩放模型到合适大小并校正偏移，支持多种格式的模型。
</code></pre>
<p><img src="http://ws1.sinaimg.cn/large/69abf49bly1g4uq4lh7dtg20d60bwtg0.gif" alt=""></p>
<hr>
<h3 id="2-yox">2. <a href="https://github.com/yoxjs/yox">yox</a></h3>
<pre><code>	一个兼容低版本浏览器的类 Vue 框架。
</code></pre>
<hr>
<h3 id="3-noahv">3. <a href="https://www.noahv.org/#/guide/about">noahv</a></h3>
<pre><code>	NoahV是一个基于vue开发的前端开发框架，主要适用于监控运维、数据分析等场景，同时也适用于常见的后台管理系统
</code></pre>
<hr>
<h2 id="react库">react库</h2>
<h2 id="css库">css库</h2>
<h3 id="1papercss">1.<a href="https://github.com/papercss/papercss">papercss</a></h3>
<pre><code>手绘风格的样式库
</code></pre>
<hr>
<h2 id="其他">其他</h2>
<h3 id="1-ogl">1. <a href="https://github.com/oframe/ogl">ogl</a></h3>
<pre><code> 最小的 WebGL 框架
</code></pre>
<hr>
<h3 id="2-charts">2. <a href="https://github.com/frappe/charts">charts</a></h3>
<pre><code>	简单、响应迅速、现代SVG图表库 零依赖关系
</code></pre>
<p><img src="http://ws1.sinaimg.cn/large/69abf49bly1g4uqc05pxng20q6086b29.gif" alt=""></p>
<hr>
<h3 id="3-china-area-data">3. <a href="https://github.com/airyland/china-area-data">china-area-data</a></h3>
<pre><code>	中国省市区数据	
</code></pre>
<p><img src="http://ws1.sinaimg.cn/large/69abf49bly1g4uqyqybq8j20lx0bf0ub.jpg" alt=""></p>
<hr>
<h3 id="4-echarts">4. <a href="https://github.com/apache/incubator-echarts">ECharts</a></h3>
<pre><code>	百度开源的图标库
</code></pre>
<hr>
<h3 id="5-ant-motion">5. <a href="https://github.com/ant-design/ant-motion/blob/master/README.cn.md">Ant Motion</a></h3>
<pre><code>	阿里开源的项目，一套 React 框架动效解决方案，可以帮助开发者，更容易的在项目中使用动效。同时可以方便快捷地制作一个公司的介绍页
</code></pre>
<hr>
<h2 id="微信">微信</h2>
<h3 id="2-jquery-weui">2. <a href="https://github.com/lihongxun945/jquery-weui">jquery-weui</a></h3>
<pre><code>可能是最好用 WeUI 版本
</code></pre>
<p><img src="http://ww1.sinaimg.cn/large/69abf49bly1g4urwxz0bwj20hs0vkwey.jpg" alt=""></p>
<hr>
<h2 id="工具库">工具库</h2>
<h3 id="1-verynginx">1. <a href="https://github.com/alexazhou/VeryNginx/blob/master/readme_zh.md">VeryNginx</a></h3>
<pre><code>VeryNginx 是一个功能强大而对人类友好的 Nginx 扩展程序.
</code></pre>
<hr>
<h2 id="在线工具">在线工具</h2>
<h3 id="1-免费且易于使用的在线pdf工具">1. <a href="https://tools.pdf24.org/zh/">免费且易于使用的在线PDF工具</a></h3>
<hr>
<h3 id="2-给你提供许多种颜色搭配每种都是四种颜色">2. <a href="https://colordrop.io/">给你提供许多种颜色搭配，每种都是四种颜色</a></h3>
<hr>
<h3 id="3-蚂蚁金服设计平台">3. <a href="https://design.alipay.com/">蚂蚁金服设计平台</a></h3>
<hr>
<h3 id="4-在线ip地址">4 <a href="https://iplist.cc/">在线IP地址</a></h3>
<pre><code>IP 查询网站，支持 IPv6 可获取来源国家、网络商等信息
</code></pre>
<hr>
<h3 id="5-speed-line">5. <a href="https://wangyasai.github.io/Speed-Line/">Speed-Line</a></h3>
<pre><code>快速画出有冲击力的线条
</code></pre>
<h2 id="文档">文档</h2>
<h3 id="1-puppeteer文档">1. <a href="https://zhaoqize.github.io/puppeteer-api-zh_CN/">Puppeteer文档</a></h3>
<hr>
<h3 id="2-ai-算法工程师手册">2. <a href="http://www.huaxiaozhuan.com/">AI 算法工程师手册</a></h3>
<hr>
<h3 id="39种常见的前端跨域解决方案详解">3.<a href="https://juejin.im/post/5d1ecb96f265da1b6d404433">9种常见的前端跨域解决方案（详解）</a></h3>
<hr>
<h3 id="4前端团队代码评审-checklist-清单">4.<a href="https://juejin.im/post/5d1c6550518825330a3bfa01">前端团队代码评审 CheckList 清单</a></h3>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[相逢一场 让你失望了]]></title>
        <id>https://he5050.github.io/post/xiang-feng-yi-chang-rang-ni-shi-wang-liao</id>
        <link href="https://he5050.github.io/post/xiang-feng-yi-chang-rang-ni-shi-wang-liao">
        </link>
        <updated>2019-07-01T07:44:47.000Z</updated>
        <summary type="html"><![CDATA[<p>这是一场漫长的一个人的搏斗
没有人知道他是否会倒下，
一次懒惰都足以击垮他</p>
]]></summary>
        <content type="html"><![CDATA[<p>这是一场漫长的一个人的搏斗
没有人知道他是否会倒下，
一次懒惰都足以击垮他</p>
<!-- more --> 
<p>柯达直到破产那天，
生产的胶卷质量都是很好的。
只是世界不再需要它了。
离开，
有时候并不是做错了什么，
只是不再被需要了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[五年前端三年切图]]></title>
        <id>https://he5050.github.io/post/ce-shi-nei-rong</id>
        <link href="https://he5050.github.io/post/ce-shi-nei-rong">
        </link>
        <updated>2019-06-27T02:49:35.000Z</updated>
        <summary type="html"><![CDATA[<p>好记性不如烂笔头，把平时遗落的点记录一下</p>
]]></summary>
        <content type="html"><![CDATA[<p>好记性不如烂笔头，把平时遗落的点记录一下</p>
<!--more-->
<h1 id="查漏补缺">查漏补缺</h1>
<h2 id="1-arrayfrom的妙用">1. Array.from()的妙用</h2>
<blockquote>
<p>可以替代我们Array.map()的另外一种方法,主要注意是Array.from(),可以授受第二个参数</p>
</blockquote>
<pre><code class="language-js">const cities = [
    { name: 'Paris', visited: 'no' },
    { name: 'Lyon', visited: 'no' },
    { name: 'Marseille', visited: 'yes' },
    { name: 'Rome', visited: 'yes' },
    { name: 'Milan', visited: 'no' },
    { name: 'Palermo', visited: 'yes' },
    { name: 'Genoa', visited: 'yes' },
    { name: 'Berlin', visited: 'no' },
    { name: 'Hamburg', visited: 'yes' },
    { name: 'New York', visited: 'yes' }
];

const cityNames = Array.from(cities, ({ name}) =&gt; name);
console.log(cityNames);
// outputs [&quot;Paris&quot;, &quot;Lyon&quot;, &quot;Marseille&quot;, &quot;Rome&quot;, &quot;Milan&quot;, &quot;Palermo&quot;, &quot;Genoa&quot;, &quot;Berlin&quot;, &quot;Hamburg&quot;, &quot;New York&quot;]
</code></pre>
]]></content>
    </entry>
</feed>
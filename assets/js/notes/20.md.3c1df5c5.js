(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{444:function(e,a,n){"use strict";n.r(a),function(e){n.d(a,"default",(function(){return u}));var t,c=n(169),s=(n(411),n(0),n(170)),o=["components"];function p(){return(p=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function m(e,a){if(null==e)return{};var n,t,c=function(e,a){if(null==e)return{};var n,t,c={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(c[n]=e[n]);return c}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}(t="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&t(e);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var b,r,N=function(e){return function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(s.b)("div",a)}},l=N("Footer"),d={};function u(e){var a=e.components,n=m(e,o);return Object(s.b)("wrapper",p({},d,n,{components:a,mdxType:"MDXLayout"}),Object(s.b)("blockquote",null,Object(s.b)(l,{mdxType:"Footer"})),Object(s.b)("h1",{className:"__internal",id:"20-ts-入门介绍"},"20 TS 入门介绍",Object(s.b)("a",{parentName:"h1",href:"#20-ts-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"TypeScript")," 只会在编译时对类型进行",Object(s.b)("strong",{parentName:"p"},"静态检查"),"，如果发现有错误，编译的时候就会报错。而在运行时，与普通的 ",Object(s.b)("inlineCode",{parentName:"p"},"JavaScript")," 文件一样，不会对类型进行检查。"),Object(s.b)("h2",{className:"__internal",id:"1-配置"},"1. 配置",Object(s.b)("a",{parentName:"h2",href:"#1-%E9%85%8D%E7%BD%AE","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("p",null,"先执行初始化配置,生成",Object(s.b)("inlineCode",{parentName:"p"},"tsconfig.json")),Object(s.b)("div",{className:"rcpress-highlight","data-language":"sh"},Object(s.b)("pre",{parentName:"div",className:"language-sh"},Object(s.b)("code",{parentName:"pre",className:"language-sh"},"tsc --init"))),Object(s.b)("p",null,"得到如下的配置文件"),Object(s.b)("div",{className:"rcpress-highlight","data-language":"json"},Object(s.b)("pre",{parentName:"div",className:"language-json"},Object(s.b)("code",{parentName:"pre",className:"language-json"},Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token property"},'"compilerOptions"'),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* Visit https://aka.ms/tsconfig.json to read more about this file */"),"\n\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* Projects */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "incremental": true,                              /* 是否启动增量编译 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "composite": true,                                /* 允许TypeScript项目与项目引用一起使用的约束 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "tsBuildInfoFile": "./",                          /* 指定.tsbuildinfo增量编译文件的文件夹 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "disableSourceOfProjectReferenceRedirect": true,  /* 在引用复合项目时禁用优先级源文件而不是声明文件 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "disableSolutionSearching": true,                 /* 在编辑时，选择一个项目不进行多项目参考检查。 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */'),"\n\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 语言与环境 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token property"},'"target"'),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"es2016"'),"，                                   ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "lib": [],                                        /* 指定要包含在编译中的库文件 d.ts */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"jsx\": \"preserve\",                                /* 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react' */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "experimentalDecorators": true,                   /* 启用装饰器 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "emitDecoratorMetadata": true,                    /* 为装饰器提供元数据的支持  */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "jsxFactory": "",                                 /* 指定JSX工厂函数用于React JSX ,createElement”或“h”*/'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"jsxFragmentFactory\": \"\",                         /* 指定JSX片段引用，用于针对React JSX ‘<></>’'React.Fragment' or 'Fragment'.  */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "jsxImportSource": "",                            /* 指定用于导入JSX工厂函数的模块 react-jsx*`.` */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "reactNamespace": "",                             /* 指定createElement调用的对象。这只适用于针对\' react \' JSX emit的情况。*/'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noLib": true,                                    /* 禁用包括任何库文件，包括默认的lib.d.ts。*/'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "useDefineForClassFields": true,                  /* 生成符合ecmaScript标准的类字段。 */'),"\n\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 模块解析选项 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token property"},'"module"'),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"commonjs"'),"，                                 ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015' */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "rootDir": "./",                                  /* 指定根文件夹 用来控制输出目录结构 --outDir. */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"moduleResolution\": \"node\",                       /* 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript)  */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "baseUrl": "./",                                  /* 用于解析非相对模块名称的基目录 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "paths": {},                                      /* 模块名到基于 baseUrl 的路径映射的列表 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "rootDirs": [],                                   /* 根文件夹列表，其组合内容表示项目运行时的结构内容 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "typeRoots": [],                                  /* 包含类型声明的文件列表 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "types": [],                                      /* 需要包含的类型声明文件名列表 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "allowUmdGlobalAccess": true,                     /* 允许从模块中访问UMD全局变量 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "resolveJsonModule": true,                        /* 启用.json文件导入 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"noResolve\": true,                                /* 禁止'import','require','reference'来扩展TypeScript应该添加到项目中 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* js的支持配置 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "allowJs": true,                                  /* 是否允许编译 javascript 文件 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "checkJs": true,                                  /* 是否报告 javascript 文件中的错误 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"maxNodeModuleJsDepth\": 1,                        /* 指定用于检查'node_modules'中的Js文件的最大文件夹深度。仅适用于' allowJs ' */"),"\n\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 输出 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"declaration\": true,                              /* 生成相应的 '.d.ts' 文件 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"declarationMap\": true,                           /* 生成相应的 'd.ts.map' 文件 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"sourceMap\": true,                                /* 生成相应的 '.map' 文件 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "outFile": "./",                                  /* 将输出文件合并为一个文件 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "outDir": "./",                                   /* 指定输出目录 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "removeComments": true,                           /* 删除编译后的所有的注释 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noEmit": true,                                   /* 不生成输出文件 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "importHelpers": true,                            /* 从tslib导入辅助工具函数允许每个项目从tslib导入helper函数一次，而不是每个文件包含它们 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "importsNotUsedAsValues": "remove",               /* 为仅用于类型的导入指定发出/检查行为*/'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "downlevelIteration": true,                       /* 为迭代生成添加兼容。*/'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "sourceRoot": "",                                 /* 指定调试器应该找到 TypeScript 文件而不是源文件的位置 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "mapRoot": "",                                    /* 指定调试器应该找到映射文件而不是生成文件的位置 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "inlineSourceMap": true,                          /* 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "inlineSources": true,                            /* 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "emitBOM": true,                                  /* 在输出文件的开头发出UTF-8 Byte Order Mark (BOM)。*/'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "newLine": "crlf",                                /* 设置发出文件的换行符。 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"stripInternal\": true,                            /* 禁用在JSDoc注释中发出带有' @internal '的声明。*/"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"noEmitHelpers\": true,                            /* 在编译后的输出中禁用生成自定义助手函数，比如' __extends '*/"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noEmitOnError": true,                            /* 如果报告任何类型检查错误，禁用编译文件 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "preserveConstEnums": true,                       /* 在生成的代码中禁用删除‘ const enum \'声明。 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "declarationDir": "./",                           /* 指定生成的声明文件的输出目录。 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "preserveValueImports": true,                     /* 在Js输出中保留未使用的导入值，否则将被删除。*/'),"\n\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 关联操作约束 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "isolatedModules": true,                          /* 将每个文件作为单独的模块(与ts.transpileModule类似)确保每个文件都可以在不依赖其他导入的情况下安全地编译。 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "allowSyntheticDefaultImports": true,             /* 允许从没有设置默认导出的模块中默认导入。 允许 import a from b ,但是b没有默认导出 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token property"},'"esModuleInterop"'),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token boolean"},"true"),"，                              ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 导入CommonJS模块的支持。需要启用'allowSyntheticDefaultImports'的类型兼容性。*/"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "preserveSymlinks": true,                         /* 禁用解析符号链接到它们的真实路径。这与节点中的相同标志相关。 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token property"},'"forceConsistentCasingInFileNames"'),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token boolean"},"true"),"，            ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 确保文件名一致 */"),"\n\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 严格的类型检查选项 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token property"},'"strict"'),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token boolean"},"true"),"，                                       ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 启用所有严格类型检查选项 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noImplicitAny": true,                            /* 在表达式和声明上有隐含的 any 类型时报错 确实不知道可以试试 unknown */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "strictNullChecks": true,                         /* 启用严格的 null与undefined 检查 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "strictFunctionTypes": true,                      /* 在赋值函数时，请检查以确保参数和返回值是子类型兼容的。 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"strictBindCallApply\": true,                      /* 检查' bind '、' call '和' apply '方法的参数是否与原始函数匹配。 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "strictPropertyInitialization": true,             /* 检查在构造函数中声明但没有设置的类属性。*/'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noImplicitThis": true,                           /* 当 this 表达式值为 any 类型的时候，生成一个错误 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"useUnknownInCatchVariables\": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"alwaysStrict\": true,                             /* 以严格模式检查每个模块，并在每个文件里加入 'use strict' */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noUnusedLocals": true,                           /* 有未使用的变量时，抛出错误 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noUnusedParameters": true,                       /* 有未使用的参数时，抛出错误 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"exactOptionalPropertyTypes\": true,               /* 解释可选的属性类型，而不是添加'undefined'。 */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noImplicitReturns": true,                        /* 并不是所有函数里的代码都有返回值时，抛出错误 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noFallthroughCasesInSwitch": true,               /* 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）*/'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// \"noUncheckedIndexedAccess\": true,                 /* 在索引签名结果中包含'undefined' */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noImplicitOverride": true,                       /* 确保派生类中的重写成员用重写修饰符标记。*/'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "noPropertyAccessFromIndexSignature": true,       /* 强制对使用索引类型声明的键使用索引访问器 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "allowUnusedLabels": true,                        /* 禁用未使用标签的错误报告。*/'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "allowUnreachableCode": true,                     /* 禁用不可达代码的错误报告。*/'),"\n\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* Completeness */"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// "skipDefaultLibCheck": true,                      /* 跳过类型检查。TypeScript中包含的ts文件。 */'),"\n        ",Object(s.b)("span",{parentName:"code",className:"token property"},'"skipLibCheck"'),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token boolean"},"true"),"                                 ",Object(s.b)("span",{parentName:"code",className:"token comment"},"/* 跳过类型检查所有。d。ts文件。*/"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}")))),Object(s.b)("h2",{className:"__internal",id:"2-类型约束"},"2. 类型约束",Object(s.b)("a",{parentName:"h2",href:"#2-%E7%B1%BB%E5%9E%8B%E7%BA%A6%E6%9D%9F","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h3",{className:"__internal",id:"1-基础类型"},"1. 基础类型",Object(s.b)("a",{parentName:"h3",href:"#1-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"printName"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"name",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," str ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token template-string"},Object(s.b)("span",{parentName:"span",className:"token template-punctuation string"},"`"),Object(s.b)("span",{parentName:"span",className:"token string"},"my name is "),Object(s.b)("span",{parentName:"span",className:"token interpolation"},Object(s.b)("span",{parentName:"span",className:"token interpolation-punctuation punctuation"},"${"),"name",Object(s.b)("span",{parentName:"span",className:"token interpolation-punctuation punctuation"},"}")),Object(s.b)("span",{parentName:"span",className:"token template-punctuation string"},"`")),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"console"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"log"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"str",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," str",Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"printAge"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"age",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"void")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," str ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token template-string"},Object(s.b)("span",{parentName:"span",className:"token template-punctuation string"},"`"),Object(s.b)("span",{parentName:"span",className:"token string"},"my age is "),Object(s.b)("span",{parentName:"span",className:"token interpolation"},Object(s.b)("span",{parentName:"span",className:"token interpolation-punctuation punctuation"},"${"),"age",Object(s.b)("span",{parentName:"span",className:"token interpolation-punctuation punctuation"},"}")),Object(s.b)("span",{parentName:"span",className:"token template-punctuation string"},"`")),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"console"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"log"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"str",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," isBoolean",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"boolean")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token boolean"},"false"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," isBooleanT",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," Boolean ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"new")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},"Boolean"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token number"},"1"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," decLiteral",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"6"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," hexLiteral",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"0xf00d"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// ES6 中的二进制表示法"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," binaryLiteral",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"0b1010"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// ES6 中的八进制表示法"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," octalLiteral",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"0o744"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," notANumber",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"NaN"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," infinityNumber",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"Infinity"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," myName",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"TTT"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," u",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"undefined")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"undefined"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," n",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"null")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"null"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," anyT",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"seven"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\nanyT ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"7"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token builtin"},"console"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"log"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"anyT",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token constant"},"T"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token builtin"},"console"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"log"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"anyT",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token constant"},"T"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token constant"},"TT"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")))),Object(s.b)("h3",{className:"__internal",id:"2-数组类型"},"2. 数组类型",Object(s.b)("a",{parentName:"h3",href:"#2-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"最简单的方法是使用「类型 + 方括号」来表示数组：")),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," numArr",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token number"},"1"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"2"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"3"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"1"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 不能将类型“string”分配给类型“number”。"),"\nnumArr",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"push"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 类型“{}”的参数不能赋给类型“number”的参数。"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," numArr1",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"Array"),Object(s.b)("span",{parentName:"code",className:"token operator"},"<"),Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token operator"},">")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token number"},"1"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"2"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 通过泛型来生成"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," numArrAny",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token number"},"1"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"2"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"3"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"1"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"null"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"undefined"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," numArrAny",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"unknown"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token number"},"1"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"2"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"3"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"1"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"null"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"undefined"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 用接口来表示数组"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"interface")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},"NumArr")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 只要索引的类型是数字时，那么值的类型必须是数字"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),"index",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 注意 这里和接口当中的任意属性([propName: string]: any; // 任意属性)是不同的"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}")))),Object(s.b)("p",null,"虽然接口也可以用来描述数组，但是我们一般不会这么做，因为这种方式比前两种方式复杂多了。不过有一种情况例外，那就是它常用来表示类数组。\n类数组",Object(s.b)("strong",{parentName:"p"},"不是数组类型"),"，比如 ",Object(s.b)("inlineCode",{parentName:"p"},"arguments")),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"getSum"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," args",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," arguments",Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 类型“IArguments”缺少类型“number[]”的以下属性: pop, push, concat, join 及其他 26 项"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 所以这里我不能使用普通数组的方式来声明约束"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"getSumT"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," args",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),"index",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n        length",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n        callee",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"Function"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," arguments",Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"getSumM"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," args",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),"index",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n        length",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n        callee",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"Function"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," arguments",Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"getSumN"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," args",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," IArguments ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," arguments",Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}")))),Object(s.b)("p",null,"事实上常用的类数组都有自己的接口定义，如 ",Object(s.b)("inlineCode",{parentName:"p"},"IArguments"),", ",Object(s.b)("inlineCode",{parentName:"p"},"NodeList"),", ",Object(s.b)("inlineCode",{parentName:"p"},"HTMLCollection")," 等内置对象："),Object(s.b)("h3",{className:"__internal",id:"3-联合类型"},"3. 联合类型",Object(s.b)("a",{parentName:"h3",href:"#3-%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"联合类型（Union Types）表示取值可以为多种类型中的一种。")),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," test",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"|")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"t"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\ntest ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"1"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"getTest"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"t",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"|")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// return t.length; // 报错类型“number”上不存在属性“length”。"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," t",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"toString"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}")))),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"TIPS: 当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里",Object(s.b)("strong",{parentName:"p"},"共有的属性或方法"),"：")),Object(s.b)("h3",{className:"__internal",id:"4-接口类型"},"4. 接口类型",Object(s.b)("a",{parentName:"h3",href:"#4-%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"在面向对象语言中，接口（",Object(s.b)("inlineCode",{parentName:"p"},"Interfaces"),"）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（",Object(s.b)("inlineCode",{parentName:"p"},"classes"),"）去实现（",Object(s.b)("inlineCode",{parentName:"p"},"implement"),"）。\n",Object(s.b)("inlineCode",{parentName:"p"},"TypeScript")," 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。")),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token keyword"},"interface")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},"Person")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"readonly")," id",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 只读属性"),"\n    name",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 指定属性"),"\n    age",Object(s.b)("span",{parentName:"code",className:"token operator"},"?"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 可选属性"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),"propName",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 任意属性"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," tom",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," Person ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// id: 11,// 会报错 缺少属性 "id"，但类型 "Person" 中需要该属性'),"\n    name",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"Tom"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},","),"\n    gender",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"male"'),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n\ntom",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"id ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"89757"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// 无法分配到 "id" ，因为它是只读属性'),"\n\n",Object(s.b)("span",{parentName:"code",className:"token comment"},'// tom.name ="123123";')))),Object(s.b)("p",null,Object(s.b)("img",{parentName:"p",src:"http://tva4.sinaimg.cn/large/69abf49bly1gypnkzfwg9j20pt07dgnm.jpg",alt:"接口报错.png"})),Object(s.b)("h3",{className:"__internal",id:"5-函数类型"},"5. 函数类型",Object(s.b)("a",{parentName:"h3",href:"#5-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// 一般函数声明"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"mySum"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"x",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," y",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," defaultNum",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"11"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," z",Object(s.b)("span",{parentName:"code",className:"token operator"},"?"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," defaultNum ",Object(s.b)("span",{parentName:"code",className:"token operator"},"+")," x ",Object(s.b)("span",{parentName:"code",className:"token operator"},"+")," y ",Object(s.b)("span",{parentName:"code",className:"token operator"},"+")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"z ",Object(s.b)("span",{parentName:"code",className:"token operator"},"||")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"0"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 一般函数声明"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"mySumTT"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"x",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," y",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," z",Object(s.b)("span",{parentName:"code",className:"token operator"},"?"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," defaultNum",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"11"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," defaultNum ",Object(s.b)("span",{parentName:"code",className:"token operator"},"+")," x ",Object(s.b)("span",{parentName:"code",className:"token operator"},"+")," y ",Object(s.b)("span",{parentName:"code",className:"token operator"},"+")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"z ",Object(s.b)("span",{parentName:"code",className:"token operator"},"||")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"0"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 函数表达式"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," ",Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"mySumT"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"x",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," y",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=>")," ",Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"x",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," y",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," x ",Object(s.b)("span",{parentName:"code",className:"token operator"},"+")," y",Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")))),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"可选参数后面不允许再出现必需参数了,注意我们在添加默认参数，其实 TS 会把默认参数变成可选参数的")),Object(s.b)("p",null,"注意不要混淆了 ",Object(s.b)("inlineCode",{parentName:"p"},"TypeScript")," 中的 ",Object(s.b)("inlineCode",{parentName:"p"},"=>")," 和 ",Object(s.b)("inlineCode",{parentName:"p"},"ES6")," 中的 ",Object(s.b)("inlineCode",{parentName:"p"},"=>"),"。"),Object(s.b)("p",null,"在 ",Object(s.b)("inlineCode",{parentName:"p"},"TypeScript")," 的类型定义中，",Object(s.b)("inlineCode",{parentName:"p"},"=>")," 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。"),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// 剩余参数   rest 参数只能是最后一个参数"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"pushToArr"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"array",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"..."),"items",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    items",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"forEach"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"item",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        array",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"push"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"item",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," a ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token function"},"pushToArr"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"a",Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"1"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"2"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"3"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")))),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// 函数重载"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 函数重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"reverseArr"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"x",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"reverseArr"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"x",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"reverseArr"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"x",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"|")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"|")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"|")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"void")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 最后做实现"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"typeof")," x ",Object(s.b)("span",{parentName:"code",className:"token operator"},"===")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"number"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"Number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"x",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"toString"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"split"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'""'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"reverse"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"join"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'""'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"else")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"typeof")," x ",Object(s.b)("span",{parentName:"code",className:"token operator"},"===")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"string"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," x",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"split"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'""'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"reverse"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"join"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'""'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}")))),Object(s.b)("p",null,"注意，",Object(s.b)("inlineCode",{parentName:"p"},"TypeScript")," 会优先从",Object(s.b)("strong",{parentName:"p"},"最前面"),"的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。"),Object(s.b)("h3",{className:"__internal",id:"6-类型断言"},"6. 类型断言",Object(s.b)("a",{parentName:"h3",href:"#6-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("p",null,"表达式： ",Object(s.b)("inlineCode",{parentName:"p"},"值 as 类型")," 或是 ",Object(s.b)("inlineCode",{parentName:"p"},"<类型>值")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"TIPS: 在 ",Object(s.b)("inlineCode",{parentName:"p"},"tsx")," 语法中必须使用前者，即 ",Object(s.b)("inlineCode",{parentName:"p"},"值 as 类型"),"。")),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token keyword"},"interface")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},Object(s.b)("span",{parentName:"span",className:"token constant"},"S"))," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    name",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token function"},"say"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"interface")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},Object(s.b)("span",{parentName:"span",className:"token constant"},"M"))," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    name",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token function"},"run"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"void"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 只能访问此联合类型的所有类型中共有的属性或方法"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"getName"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token constant"},"T"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"S")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"|")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"M"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"T"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"name",Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 如果要访问 say方法时"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"getNameSay"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token constant"},"T"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"S")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"|")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"M"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"typeof")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token constant"},"T")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"as")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"S"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"say ",Object(s.b)("span",{parentName:"code",className:"token operator"},"!==")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"function"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 如果不用断言的话 会报错 提示如下:类型“S | M”上不存在属性“say”。类型“M”上不存在属性“say”。"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"console"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"log"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"T"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"T"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"T"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"name",Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 使用类型断言时一定要格外小心，尽量避免断言后调用方法或引用深层属性，以减少不必要的运行时错误。"),"\n\nwindow",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"b ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"11"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 类型“Window & typeof globalThis”上不存在属性“b”。"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"window ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"as")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"b ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"11"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 在 any 类型的变量上，访问任何属性都是允许的。 它极有可能掩盖了真正的类型错误，所以如果不是非常确定，就不要使用 as any。"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 不知道返回什么类型时可以 能过获取结果处来实现"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"getData"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"key",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"window ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"as")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"cache",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),"key",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"interface")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},Object(s.b)("span",{parentName:"span",className:"token constant"},"B"))," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    name",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token function"},"say"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"void"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," bb ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"getData"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"b"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"as")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"B"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 类型断言"),"\nbb",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"say"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," bbb",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"B")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"getData"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"b"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 类型声明"),"\nbbb",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"say"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 能过泛型来进行约束"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token generic-function"},Object(s.b)("span",{parentName:"span",className:"token function"},"getDatat"),Object(s.b)("span",{parentName:"span",className:"token generic class-name"},Object(s.b)("span",{parentName:"span",className:"token operator"},"<"),Object(s.b)("span",{parentName:"span",className:"token constant"},"T"),Object(s.b)("span",{parentName:"span",className:"token operator"},">"))),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"key",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token constant"},"T")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"window ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"as")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"cache",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),"key",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"interface")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},Object(s.b)("span",{parentName:"span",className:"token constant"},"B"))," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    name",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token function"},"say"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"void"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," bbt ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token generic-function"},Object(s.b)("span",{parentName:"span",className:"token function"},"getDatat"),Object(s.b)("span",{parentName:"span",className:"token generic class-name"},Object(s.b)("span",{parentName:"span",className:"token operator"},"<"),Object(s.b)("span",{parentName:"span",className:"token constant"},"B"),Object(s.b)("span",{parentName:"span",className:"token operator"},">"))),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"b"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\nbbt",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"say"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")))),Object(s.b)("h3",{className:"__internal",id:"7-声明文件"},"7. 声明文件",Object(s.b)("a",{parentName:"h3",href:"#7-%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"当使用第三方库时，我们需要引用它的声明文件，才能获得对应的",Object(s.b)("strong",{parentName:"p"},"代码补全"),"、",Object(s.b)("strong",{parentName:"p"},"接口提示"),"等功能。")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#declare-var"},Object(s.b)("inlineCode",{parentName:"a"},"declare var"))," 声明全局变量"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#declare-function"},Object(s.b)("inlineCode",{parentName:"a"},"declare function"))," 声明全局方法"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#declare-class"},Object(s.b)("inlineCode",{parentName:"a"},"declare class"))," 声明全局类"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#declare-enum"},Object(s.b)("inlineCode",{parentName:"a"},"declare enum"))," 声明全局枚举类型"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#declare-namespace"},Object(s.b)("inlineCode",{parentName:"a"},"declare namespace"))," 声明（含有子属性的）全局对象"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#interface-type"},Object(s.b)("inlineCode",{parentName:"a"},"interface与type"))," 声明全局类型"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#export"},Object(s.b)("inlineCode",{parentName:"a"},"export"))," 导出变量"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#export-namespace"},Object(s.b)("inlineCode",{parentName:"a"},"export namespace"))," 导出（含有子属性的）对象"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#export-default"},Object(s.b)("inlineCode",{parentName:"a"},"export default"))," ES6 默认导出"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#export-1"},Object(s.b)("inlineCode",{parentName:"a"},"export ="))," commonjs 导出模块"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#export-as-namespace"},Object(s.b)("inlineCode",{parentName:"a"},"export as namespace"))," UMD 库声明全局变量"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#declare-global"},Object(s.b)("inlineCode",{parentName:"a"},"declare global"))," 扩展全局变量"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#declare-module"},Object(s.b)("inlineCode",{parentName:"a"},"declare module"))," 扩展模块"),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("a",{parentName:"li",href:"#reference"},Object(s.b)("inlineCode",{parentName:"a"},"/// <reference />"))," 三斜线指令")),Object(s.b)("h4",{className:"__internal",id:"1声明语句"},"1.声明语句",Object(s.b)("a",{parentName:"h4",href:"#1%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8F%A5","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 ",Object(s.b)("inlineCode",{parentName:"p"},"<script>")," 标签引入 ",Object(s.b)("inlineCode",{parentName:"p"},"jQuery"),"，然后就可以使用全局变量 ",Object(s.b)("inlineCode",{parentName:"p"},"$")," 或 ",Object(s.b)("inlineCode",{parentName:"p"},"jQuery")," 了。")),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"var")," ",Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"$"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=>")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 我们在这里声明了 我们的$后面提示就可以顺利的编译通过"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token function"},"$"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"#cc"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")," ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// 找不到名称 "$"。是否需要安装 jQuery 的类型定义? 请尝试使用 `npm i --save-dev @types/jquery`。')))),Object(s.b)("h4",{className:"__internal",id:"2声明文件"},"2.声明文件",Object(s.b)("a",{parentName:"h4",href:"#2%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"通常我们会把声明语句放到一个单独的文件（jQuery.d.ts）中，这就是声明文件")),Object(s.b)("div",{className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// 文件$.d.ts"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"var")," ",Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"$"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=>")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 文件 02.tsx"),"\n",Object(s.b)("span",{parentName:"code",className:"token function"},"$"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"#cc"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")))),Object(s.b)("p",null,Object(s.b)("img",{parentName:"p",src:"http://tva1.sinaimg.cn/large/69abf49bly1gypyg5gsfjj21as0bggp4.jpg",alt:"声明文件1.png"})),Object(s.b)("p",null,"这里基本上所有常用的库社区都帮我们定义好了 可以直接能过 ",Object(s.b)("a",{parentName:"p",href:"https://www.typescriptlang.org/dt/search?search=",target:"_blank"},"search"),"来查询我们需要的库;"),Object(s.b)("div",{className:"rcpress-highlight","data-language":"bash"},Object(s.b)("pre",{parentName:"div",className:"language-bash"},Object(s.b)("code",{parentName:"pre",className:"language-bash"},"// @types 的使用方式很简单，直接用 ",Object(s.b)("span",{parentName:"code",className:"token function"},"npm")," 安装对应的声明模块即可\n",Object(s.b)("span",{parentName:"code",className:"token function"},"npm")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"install")," @types/jquery --save-dev"))),Object(s.b)("h4",{className:"__internal",id:"3书写声明文件"},"3.书写声明文件",Object(s.b)("a",{parentName:"h4",href:"#3%E4%B9%A6%E5%86%99%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("p",null,"当一个第三方库没有提供声明文件时，我们就需要自己书写声明文件了。前面只介绍了最简单的声明文件内容，而真正书写一个声明文件并不是一件简单的事，以下会详细介绍如何书写声明文件。"),Object(s.b)("p",null,"在不同的场景下，声明文件的内容和使用方式会有所区别。"),Object(s.b)("p",null,"库的使用场景主要有以下几种："),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#quan-ju-bian-liang"},"全局变量"),"：通过 ",Object(s.b)("inlineCode",{parentName:"p"},"<script>")," 标签引入第三方库，注入全局变量\n全局变量的声明文件主要有以下几种语法："),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#declare-var"},Object(s.b)("inlineCode",{parentName:"a"},"declare var"))," 声明全局变量"),Object(s.b)("h5",{parentName:"li",className:"__internal",id:"declare-var"},"declare var",Object(s.b)("a",{parentName:"h5",href:"#declare-var","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",{parentName:"li"},Object(s.b)("p",{parentName:"blockquote"},"这里需要注意的 ",Object(s.b)("inlineCode",{parentName:"p"},"let/var"),"与 ",Object(s.b)("inlineCode",{parentName:"p"},"const"),"声明时的区别")),Object(s.b)("div",{parentName:"li",className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// $.d.ts"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," ",Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"$"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=>")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// $ 02.tsx"),"\n",Object(s.b)("span",{parentName:"code",className:"token function"},"$"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"#cc"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 使用 declare let 定义的 jQuery 类型，允许修改这个全局变量"),"\n",Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"$")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," document",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"querySelector"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")))),Object(s.b)("div",{parentName:"li",className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// $.d.ts"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"$"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=>")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// $ 02.tsx"),"\n",Object(s.b)("span",{parentName:"code",className:"token function"},"$"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"#cc"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},'// 这里会报错无法分配到 "$" ，因为它是常数。'),"\n",Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"$")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," document",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"querySelector"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")))),Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"一般来说，全局变量都是禁止修改的常量，所以大部分情况都应该使用 ",Object(s.b)("inlineCode",{parentName:"strong"},"const")," 而不是 ",Object(s.b)("inlineCode",{parentName:"strong"},"var")," 或",Object(s.b)("inlineCode",{parentName:"strong"},"let"),"。")),Object(s.b)("div",{parentName:"li",className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// $.d.ts"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"$")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token comment"},'// 报错环境上下文中的 "const" 初始化表达式必须为字符串、数字文本或文本枚举引用。'),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," document",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"querySelector"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";")))),Object(s.b)("p",{parentName:"li"},Object(s.b)("strong",{parentName:"p"},"需要注意的是，声明语句中只能定义类型，切勿在声明语句中定义具体的实现"))),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#declare-function"},Object(s.b)("inlineCode",{parentName:"a"},"declare function"))," 声明全局方法"),Object(s.b)("h5",{parentName:"li",className:"__internal",id:"declare-function"},"declare function",Object(s.b)("a",{parentName:"h5",href:"#declare-function","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("div",{parentName:"li",className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// $.d.ts"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"$"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 支持函数的重载"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"$"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"domReadyCallback"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=>")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 02.tsx"),"\n",Object(s.b)("span",{parentName:"code",className:"token function"},"$"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"#cc"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token function"},"$"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"console"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"log"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"dom is ready"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"))))),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#declare-class"},Object(s.b)("inlineCode",{parentName:"a"},"declare class"))," 声明全局类"),Object(s.b)("h5",{parentName:"li",className:"__internal",id:"declare-class"},"declare class",Object(s.b)("a",{parentName:"h5",href:"#declare-class","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",{parentName:"li"},Object(s.b)("p",{parentName:"blockquote"},"当全局变量是一个类的时候，我们用 ",Object(s.b)("inlineCode",{parentName:"p"},"declare class")," 来定义它的类型")),Object(s.b)("div",{parentName:"li",className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// b.d.ts"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"class")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},Object(s.b)("span",{parentName:"span",className:"token constant"},"B"))," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  name",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"constructor"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"name",Object(s.b)("span",{parentName:"code",className:"token operator"},":"),Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(s.b)("span",{parentName:"code",className:"token function"},"say"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":"),Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(s.b)("span",{parentName:"code",className:"token comment"},"//sayHello() {"),"\n  ",Object(s.b)("span",{parentName:"code",className:"token comment"},"//  // 报错 在声明里面 不能用来定义具体的实现"),"\n  ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// return ` hello My name is ${this.name}`;"),"\n  ",Object(s.b)("span",{parentName:"code",className:"token comment"},"//};"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 02.tsx"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," bb ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"new")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},Object(s.b)("span",{parentName:"span",className:"token constant"},"B")),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"b-b"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"))))),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#declare-enum"},Object(s.b)("inlineCode",{parentName:"a"},"declare enum"))," 声明全局枚举类型"),Object(s.b)("h5",{parentName:"li",className:"__internal",id:"declare-enum"},"declare enum",Object(s.b)("a",{parentName:"h5",href:"#declare-enum","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",{parentName:"li"},Object(s.b)("p",{parentName:"blockquote"},"使用 ",Object(s.b)("inlineCode",{parentName:"p"},"declare enum")," 定义的枚举类型也称作外部枚举")),Object(s.b)("div",{parentName:"li",className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// Directions.d.ts"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// declare enum 仅用来定义类型，而不是具体的值"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"enum")," Directions ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    Up",Object(s.b)("span",{parentName:"code",className:"token punctuation"},","),"\n    Down",Object(s.b)("span",{parentName:"code",className:"token punctuation"},","),"\n    Left",Object(s.b)("span",{parentName:"code",className:"token punctuation"},","),"\n    Right\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// directions.tsx"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"let")," directions ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"["),"Directions",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"Up",Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," Directions",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"Down",Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," Directions",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"Left",Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," Directions",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"Right",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"))))),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#declare-namespace"},Object(s.b)("inlineCode",{parentName:"a"},"declare namespace"))," 声明（含有子属性的）全局对象"),Object(s.b)("h5",{parentName:"li",className:"__internal",id:"declare-namespace"},"declare namespace",Object(s.b)("a",{parentName:"h5",href:"#declare-namespace","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",{parentName:"li"},Object(s.b)("p",{parentName:"blockquote"},"namespace 是 ts 早期时为了解决模块化而创造的关键字，中文称为命名空间。 ",Object(s.b)("strong",{parentName:"p"},"不推荐使用了"),",现在基本上会使用",Object(s.b)("inlineCode",{parentName:"p"},"ES6"),"中的",Object(s.b)("inlineCode",{parentName:"p"},"module"))),Object(s.b)("div",{parentName:"li",className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token comment"},"// $.d.ts"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"namespace")," $ ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"domReadyCallback"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=>")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n     ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"const")," version",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"number"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n     ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"class")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},"Event")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token function"},"blur"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"eventType",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," EventType",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"void"),"\n     ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n     ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"enum")," EventType ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        CustomClick\n     ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n     ",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 嵌套 namespace"),"\n     ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"namespace")," fn ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"extend"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"object",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"void"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"// 02.tsx"),"\n",Object(s.b)("span",{parentName:"code",className:"token function"},"$"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},"=>"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"console"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"log"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token string"},'"dom is ready"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n$",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"fn",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"extend"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token function-variable function"},"check"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"this"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.b)("span",{parentName:"code",className:"token function"},"each"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"function"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n            ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"this"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"."),"checked ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token boolean"},"true"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n        ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"))))),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#interface-type"},Object(s.b)("inlineCode",{parentName:"a"},"interface与type"))," 声明全局类型"),Object(s.b)("h5",{parentName:"li",className:"__internal",id:"interface-与-type"},"interface 与 type",Object(s.b)("a",{parentName:"h5",href:"#interface-%E4%B8%8E-type","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("blockquote",{parentName:"li"},Object(s.b)("p",{parentName:"blockquote"},"除了全局变量之外，可能有一些类型我们也希望能暴露出来。在类型声明文件中，我们可以直接使用 ",Object(s.b)("inlineCode",{parentName:"p"},"interface")," 或 ",Object(s.b)("inlineCode",{parentName:"p"},"type")," 来声明一个全局的接口或类型")),Object(s.b)("div",{parentName:"li",className:"rcpress-highlight","data-language":"ts"},Object(s.b)("pre",{parentName:"div",className:"language-ts"},Object(s.b)("code",{parentName:"pre",className:"language-ts"},Object(s.b)("span",{parentName:"code",className:"token keyword"},"type")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},"Methods")," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"GET"')," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"|")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"POST"')," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"|")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"PUT"')," ",Object(s.b)("span",{parentName:"code",className:"token operator"},"|")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"DELETE"'),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"interface")," ",Object(s.b)("span",{parentName:"code",className:"token class-name"},"AjaxSettings")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    method",Object(s.b)("span",{parentName:"code",className:"token operator"},"?"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," Methods",Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n    data",Object(s.b)("span",{parentName:"code",className:"token operator"},"?"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"//声明合并 我们可以组合多个声明语句，它们会不冲突的合并起来"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"$"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"selector",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"any"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token keyword"},"declare")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"namespace")," $ ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(s.b)("span",{parentName:"code",className:"token function"},"ajax"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),"url",Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token builtin"},"string"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},",")," settings",Object(s.b)("span",{parentName:"code",className:"token operator"},"?"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," AjaxSettings",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token operator"},":")," ",Object(s.b)("span",{parentName:"code",className:"token keyword"},"void"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"}"))))))),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#npm-bao"},"npm 包"),"：通过 ",Object(s.b)("inlineCode",{parentName:"p"},"import foo from 'foo'")," 导入，符合 ES6 模块规范")),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#umd-ku"},"UMD 库"),"：既可以通过 ",Object(s.b)("inlineCode",{parentName:"p"},"<script>")," 标签引入，又可以通过 ",Object(s.b)("inlineCode",{parentName:"p"},"import")," 导入")),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#zhi-jie-kuo-zhan-quan-ju-bian-liang"},"直接扩展全局变量"),"：通过 ",Object(s.b)("inlineCode",{parentName:"p"},"<script>")," 标签引入后，改变一个全局变量的结构")),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#zai-npm-bao-huo-umd-ku-zhong-kuo-zhan-quan-ju-bian-liang"},"在 npm 包或 UMD 库中扩展全局变量"),"：引用 npm 包或 UMD 库后，改变一个全局变量的结构")),Object(s.b)("li",{parentName:"ul",className:"__internal"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",{parentName:"p",href:"#mo-kuai-cha-jian"},"模块插件"),"：通过 ",Object(s.b)("inlineCode",{parentName:"p"},"<script>")," 或 ",Object(s.b)("inlineCode",{parentName:"p"},"import")," 导入后，改变另一个模块的结构"))),Object(s.b)("h3",{className:"__internal",id:"5-11"},"5. 11",Object(s.b)("a",{parentName:"h3",href:"#5-11","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h3",{className:"__internal",id:"5-11-1"},"5. 11",Object(s.b)("a",{parentName:"h3",href:"#5-11-1","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h2",{className:"__internal",id:"2-111"},"2. 111",Object(s.b)("a",{parentName:"h2",href:"#2-111","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h2",{className:"__internal",id:"2-111-1"},"2. 111",Object(s.b)("a",{parentName:"h2",href:"#2-111-1","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h2",{className:"__internal",id:"2-111-2"},"2. 111",Object(s.b)("a",{parentName:"h2",href:"#2-111-2","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h2",{className:"__internal",id:"2-111-3"},"2. 111",Object(s.b)("a",{parentName:"h2",href:"#2-111-3","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h2",{className:"__internal",id:"2-111-4"},"2. 111",Object(s.b)("a",{parentName:"h2",href:"#2-111-4","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h2",{className:"__internal",id:"2-111-5"},"2. 111",Object(s.b)("a",{parentName:"h2",href:"#2-111-5","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h2",{className:"__internal",id:"2-111-6"},"2. 111",Object(s.b)("a",{parentName:"h2",href:"#2-111-6","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h2",{className:"__internal",id:"2-111-7"},"2. 111",Object(s.b)("a",{parentName:"h2",href:"#2-111-7","aria-hidden":!0,className:"anchor"},"#")),Object(s.b)("h2",{className:"__internal",id:"2-111-8"},"2. 111",Object(s.b)("a",{parentName:"h2",href:"#2-111-8","aria-hidden":!0,className:"anchor"},"#")))}u.isMDXComponent=!0,u=Object(c.hot)(e)(u),(b="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(b.register(N,"makeShortcode","E:\\h-project\\my-blog\\docs\\notes\\20.md"),b.register(l,"Footer","E:\\h-project\\my-blog\\docs\\notes\\20.md"),b.register(d,"layoutProps","E:\\h-project\\my-blog\\docs\\notes\\20.md"),b.register("wrapper","MDXLayout","E:\\h-project\\my-blog\\docs\\notes\\20.md"),b.register(u,"MDXContent","E:\\h-project\\my-blog\\docs\\notes\\20.md")),(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&r(e)}.call(this,n(4)(e))}}]);